---

- fail:
    msg: 'this role requires facts'
  when: not ansible_facts
  tags: ['netdata']

- fail:
    msg: 'unsupported OS version: {{ ansible_distribution_major_version }}'
  when:
    - ansible_distribution_file_variety == "RedHat" and ansible_distribution_major_version <= 7
  tags:
    - netdata

- name: 'netdata: packages'
  block:
    - package:
        name: '{{ netdata_required_packages }}'
        state: 'present'

    - systemd:
        name: '{{ item }}'
        enabled: true
        state: 'started'
      with_items:
        - hddtemp
        - smartd

    - name: 'netdata: smart: directory'
      file:
        path: '/var/log/smartd/'
        state: 'directory'
        owner: 'root'
        group: 'root'
        mode: '0755'

    - name: 'netdata: smart: config'
      lineinfile:
        path: '{{ netdata_sysconfdir[ansible_distribution_file_variety] }}/smartmontools'
        regexp: '^smartd_opts='
        line: 'smartd_opts="-q never -i 600 -A /var/log/smartd/"'
      notify:
        - 'reload smartd'
        - 'reload netdata'

  when:
    - ansible_virtualization_role == "host"
  tags:
    - netdata

- block:
    - name: 'netdata: check local version'
      command: '/opt/netdata/bin/netdata -V'
      register: command
      failed_when: false
      changed_when: false

    - set_fact:
        local_netdata_version: '{{ command.stdout.partition(" ")[-1] }}'
      when:
        - not ansible_check_mode
        - command.rc == 0
  tags:
    - netdata

- name: 'netdata: get version from package name'
  when:
    - netdata_package_uri|bool
  run_once: true
  delegate_to: localhost
  tags: ['netdata']
  block:
    - set_fact:
        netdata_latest_package: "{{ netdata_package_uri | basename }}"

    - set_fact:
        netdata_latest_version: "{{ netdata_latest_package.partition('-v')[-1] }}"


- name: 'netdata: get version from GitHub'
  when:
    - not netdata_package_uri|bool
  run_once: true
  delegate_to: localhost
  tags: ['netdata']
  block:
    - name: 'get informations from GitHub'
      set_fact:
        _netdata_latest: "{{ lookup('url', 'https://api.github.com/repos/netdata/netdata/releases/latest') | from_json }}"

    - set_fact:
        netdata_latest_version: "{{ _netdata_latest.tag_name.lstrip('v') }}"

    - set_fact:
        netdata_package_uri: '{{ item.browser_download_url }}'
        netdata_latest_package: '{{ item.name }}'
      with_items: '{{ _netdata_latest.assets }}'
      when:
        - item.name.endswith(".run")

- name: 'installation/upgrade'
  tags: ['netdata']
  import_tasks: 'download_and_install.yml'

- name: 'configuration: ensure files are present'
  block:
    - stat:
        get_attributes: false
        get_checksum: false
        get_mime: false
        path: '/opt/netdata/etc/netdata/{{ item }}'
      with_items:
        - health_alarm_notify.conf
        - stream.conf
      register: _result

    - copy:
        src: '/opt/netdata/usr/lib/netdata/conf.d/{{ item.item }}'
        dest: '{{ item.invocation.module_args.path }}'
        remote_src: true
      with_items: '{{ _result.results }}'
      when:
        - not item.stat.exists

- name: 'netdata: configuration'
  block:

    - systemd:
        name: 'netdata'
        enabled: true
        daemon_reload: true

    - name: 'netdata: configuration: main'
      ini_file:
        create: 'no'
        path: '/opt/netdata/etc/netdata/netdata.conf'
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:
        - section: 'global'
          option: 'update every'
          value: '10'
        - section: 'plugin:proc:diskspace'
          option: 'exclude space metrics on paths'
          value: '/dev/* /proc/* /sys/* /var/run/user/* /var/lib/docker/*'
        - section: 'plugin:proc:diskspace'
          option: 'exclude space metrics on filesystems'
          value: 'autofs devtmpfs nfs nfsd nsfs tmpfs'
        - section: 'plugin:proc:/proc/net/dev'
          option: 'disable by default interfaces matching'
          value: 'lo fireqos* *-ifb ifb* br-* veth* teql* docker*'
        - section: 'plugin:proc:/proc/diskstats'
          option: 'exclude disks'
          value: 'loop* ram* dm* docker*'
      notify:
        - 'reload netdata'

    - name: 'netdata: configuration: disable alert mails'
      lineinfile:
        path: '/opt/netdata/etc/netdata/health_alarm_notify.conf'
        regexp: '^SEND_EMAIL='
        line: 'SEND_EMAIL="NO"'
      notify:
        - 'reload netdata'

  tags:
    - netdata

- name: 'netdata: configuration: streaming'
  block:

    - name: 'netdata: configuration: master to slave'
      ini_file:
        path: '/opt/netdata/etc/netdata/stream.conf'
        section: '{{ netdata_stream_uuid }}'
        state: 'absent'
      when:
        - inventory_hostname != netdata_master_host
      notify:
        - 'reload netdata'

    - name: 'netdata: configuration: master'
      ini_file:
        path: '/opt/netdata/etc/netdata/stream.conf'
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:
        - { section: 'stream', option: 'enabled', value: 'no' }
        - { section: '{{ netdata_stream_uuid }}', option: 'enabled', value: 'yes' }
        - { section: '{{ netdata_stream_uuid }}', option: 'allow from', value: '*' }
        - { section: '{{ netdata_stream_uuid }}', option: 'history', value: '3600' }
        - { section: '{{ netdata_stream_uuid }}', option: 'memory mode', value: 'save' }
        - { section: '{{ netdata_stream_uuid }}', option: 'health enabled', value: 'yes' }
        - { section: '{{ netdata_stream_uuid }}', option: 'postpone alarms on connect seconds', value: '60' }
      when:
        - inventory_hostname == netdata_master_host
      notify:
        - 'reload netdata'

    - name: 'netdata: configuration: slave'
      ini_file:
        path: '/opt/netdata/etc/netdata/stream.conf'
        section: '{{ item.section }}'
        option: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items:
        - { section: 'stream', option: 'enabled', value: 'yes' }
        - { section: 'stream', option: 'destination', value: '{{ netdata_master }}' }
        - { section: 'stream', option: 'api key', value: '{{ netdata_stream_uuid }}' }
      when:
        - inventory_hostname != netdata_master_host
      notify:
        - 'reload netdata'

  when:
    - netdata_master_host|default()
    - netdata_stream_uuid|default()
  tags:
    - netdata

- name: 'selinux: check if loaded'
  stat:
    path: '/sys/fs/selinux'
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: _sys_fs_selinux
  tags: ['netdata']

- name: 'selinux: workarounds'
  import_tasks: 'wa-selinux.yml'
  when:
    - _sys_fs_selinux.stat.exists is defined
    - _sys_fs_selinux.stat.exists
  tags: ['netdata']

# https://github.com/netdata/netdata/issues/827
# http://www.novell.com/support/kb/doc.php?id=7010449
# https://github.com/prometheus/node_exporter/issues/903
- name: "blacklist acpi_power_meter which doesn't work anyway on affected HP servers due to a BIOS bug"
  when: ansible_facts.system_vendor == "HP"
  lineinfile:
    create: true
    mode: 0644
    path: '/etc/modprobe.d/hwmon.conf'
    line: 'blacklist acpi_power_meter'

...
